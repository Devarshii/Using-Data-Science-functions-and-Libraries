# -*- coding: utf-8 -*-
"""Eth Prices_Ds_project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16m_3DkuDFm1WkbHxHCIVtUTcselFwfuE

#Eth Prices Analysis
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd

"""##Exploring Data"""

#importing data
df = pd.read_csv('/content/drive/My Drive/DPA/ETH-USD.csv')
df.head()

df.tail()

"""###Feature analysis"""

m,n=df.shape
print(f"No of samples are {m}")
print(f"No of features are {n}")

df.columns.tolist()

"""###Univariate and Bivariate non-graphical analysis"""

df.describe()

df.info()

df.max()

df['Open'].argmax()

df['Close'].value_counts()

df.sort_values('High').head()

df[df['Low'] > 450].head()

df.groupby('High')['Close'].mean().head()

df[['Open', 'Close']].head()

df.mean()

df.mode().sum()

df.median()

df.std()

df.var()

"""##Data Cleaning"""

df.isnull().sum()

df.isna().sum()

"""##Exploratory Data Analysis of ETH: prices using graphs

*   List item
*   List item


"""

import matplotlib.pyplot as plt
import seaborn as sns

# distribution of volume (in mn)
plt.figure(figsize=(12,4))
df.Volume.plot(kind='hist', bins=50)
plt.title('Volume')
plt.grid()
plt.show()

# plot price development
fig, ax = plt.subplots(figsize=(16,6))
df['Price'] = df['Adj Close']
ax.plot(df.Date, df.Price, marker='.')
ax.xaxis.set_major_locator(plt.MaxNLocator(12)) # reduce number of x-labels
plt.title('Price')
plt.grid()
plt.show()

#Some derived features
import numpy as np
df['logPrice'] = np.log(df.Price)
df['logChange'] = df.logPrice.diff()
df['percChange'] = df.Price.pct_change()

fig, ax = plt.subplots(figsize=(16,6))
ax.scatter(df.Date, df.percChange, marker='.')
ax.xaxis.set_major_locator(plt.MaxNLocator(12)) # reduce number of x-labels
plt.title('Relative changes')
plt.grid()
plt.show()

# plot price vs volume (each in log scale)
plt.figure(figsize=(6,6))
plt.scatter(np.log(df.Volume), df.logPrice, alpha=0.2)
plt.title('log(Price) vs log(Volume)')
plt.xlabel('log(Volume)')
plt.ylabel('log(Price)')
plt.grid()
plt.show()

# extract time features
df.Date = pd.to_datetime(df.Date)
df['Year'] = df.Date.dt.year
df['Month'] = df.Date.dt.month
df['Day'] = df.Date.dt.day

# evaluate mean values by month
plt.figure(figsize=(12,4))
logC_month = df.groupby(by='Month')['logChange'].mean()
plt.plot(logC_month, marker='.')
plt.ylim(-0.05, 0.05)
plt.title('logChange - mean by month')
plt.grid()
plt.show()

#High prices vs low prices
import seaborn as sns
sns.lineplot(df['Low'],color='red')
sns.lineplot(df['High'],color='green')
plt.title('ETH High Vs Low')
plt.show()

#Visualizing the closing price
df['Close'].plot(kind='hist', bins=500);

high_prices = list(df["High"])
high_prices[:5]

"""##Statistical/Inferential Analysis

Statistical analysis is the collection and interpretation of data in order to uncover patterns and trends.
Different tests done are:

- Ztest
- Ttest
- Correlation analysis
"""

import random

random.seed(120) 
high_prices = list(df["High"])
high_prices_sample = random.sample(high_prices, k=3) 
print (high_prices_sample)

from statsmodels.stats.weightstats import ztest
high_prices = list(df["High"])
low_prices = list(df["Low"])

ztest(high_prices, low_prices, value=0)

import scipy.stats as stats
low_prices = list(df["Low"])

stats.ttest_1samp(low_prices, popmean=10)

import scipy.stats as stats
high_prices = list(df["High"])
low_prices = list(df["Low"])
corr = stats.pearsonr(high_prices, low_prices)
print (corr)